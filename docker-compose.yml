version: '3.7'

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${USER_PATH}/postgres/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    stdin_open: true
    tty: true
    networks:
      - dev
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ${USER_PATH}/pgadmin:/var/lib/pgadmin
    #   - ${USER_PATH}/postgres/pgadmin/certs:/certs/server.cert
    #   - ${USER_PATH}/postgres/pgadmin/key:/certs/server.key
    #   - ${USER_PATH}/postgres/pgadmin/json:/pgadmin4/servers.json
    ports:
      - "80:80"
    stdin_open: true
    tty: true
    depends_on:
      - postgres
    networks:
      - dev
  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   volumes:
  #     - ${USER_PATH}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - dev
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   volumes: 
  #     - /proc:/host/proc:ro 
  #     - /sys:/host/sys:ro 
  #     - /:/rootfs:ro 
  #   command: 
  #     - '--path.procfs=/host/proc' 
  #     - '--path.rootfs=/rootfs' 
  #     - '--path.sysfs=/host/sys' 
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - dev
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   container_name: cadvisor
  #   ports:
  #   - 8080:8080
  #   volumes:
  #   - /:/rootfs:ro
  #   - /var/run:/var/run:rw
  #   - /sys:/sys:ro
  #   - /var/lib/docker/:/var/lib/docker:ro
  #   networks:
  #     - dev
  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   volumes:
  #     - ${USER_PATH}/grafana:/var/lib/grafana
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - dev
  # mongo:
  #   container_name: mongo
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_mongo
  #   volumes:
  #     - ${USER_PATH}/mongo:/data/db
  #   ports:
  #     - "27017:27017"
  # mongo_express:
  #   container_name: mongo-express
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_mongo_express
  #   environment:
  #     ME_CONFIG_OPTIONS_EDITORTHEME: ${ME_CONFIG_OPTIONS_EDITORTHEME} 
  #     ME_CONFIG_MONGODB_SERVER: ${ME_CONFIG_MONGODB_SERVER}
  #     ME_CONFIG_MONGODB_PORT: ${ME_CONFIG_MONGODB_PORT}
  #     ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
  #     ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
  #   ports:
  #     - "8080:8081"
  # python:
  #   container_name: python
  #   build:
  #     context: .
  #     dockerfile: DockerFile.python
  #     args:
  #       USER: ${USER}
  #       USER_ID: ${USER_ID}
  #       GROUP_ID: ${GROUP_ID}
  #   volumes:
  #     - ${USER_PATH}:/app
  #   command: sh -c "python -m http.server 8002"
  #   # command: sh -c "python manage.py runserver 0.0.0.0:8000"
  #   ports:
  #     - "8002:8002"
  #     - "8003:8003"
  #     - "8004:8004"
  #   stdin_open: true
  #   tty: true
  #   depends_on:
  #     - postgres
  #   networks:
  #     - dev
  # nginx:
  #   container_name: nginx
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_nginx
  #   volumes:
  #     - ${USER_PATH}/nginx:/usr/share/nginx/html 
  #   ports:
  #     - "8081:80"
  # apache:
  #   container_name: apache
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_apache
  #   volumes:
  #     - ${USER_PATH}/apache:/usr/local/apache2/htdocs 
  #   ports:
  #     - "8082:80"
  #   stdin_open: true
  #   tty: true
  # mariadb:
  #   container_name: mariadb 
  #   image: mariadb:latest
  #   volumes:
  #     - ${USER_PATH}/mariadb/data:/var/lib/mysql
  #     - ${USER_PATH}/mariadb/config:/etc/mysql
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: admin
  #     MYSQL_DATABASE: wordpress
  #     MYSQL_USER: wordpress
  #     MYSQL_PASSWORD: wordpress
  #   ports:
  #     - "8089:8000"
  #   stdin_open: true
  #   tty: true
  # phpmyadmin:
  #   container_name: phpmyadmin
  #   image: phpmyadmin/phpmyadmin:latest
  #   links:
  #     - mariadb:db
  #   volumes:
  #     - ${USER_PATH}/phpmyadmin:/etc/phpmyadmin/config.user.inc.php
  #   environment:
  #     PMA_USER: wordpress
  #     PMA_PASSWORD: wordpress
  #   ports:
  #     - "8090:80"
  #   stdin_open: true
  #   tty: true
  # php:
  #   container_name: php
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_php
  #     args:
  #       USER: ${USER}
  #       USER_ID: ${USER_ID}
  #       GROUP_ID: ${GROUP_ID}
  #   volumes:
  #     - ${USER_PATH}/php:/home 
  #   ports:
  #     - "8088:8000"
  #   stdin_open: true
  #   tty: true
  # ubuntu:
  #   container_name: ubuntu
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_ubuntu
  #     args:
  #       USER: ${USER}
  #       USER_ID: ${USER_ID}
  #       GROUP_ID: ${GROUP_ID}
  #   volumes:
  #     - ${USER_PATH}/ubuntu:/home 
  #   ports:
  #     - "8083:8000"
  #     - "8084:8001"
  #     - "8085:8002"
  #   stdin_open: true
  #   tty: true

networks:
  dev:
    name: dev